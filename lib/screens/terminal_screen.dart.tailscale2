import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:dartssh2/dartssh2.dart';
import 'package:xterm/xterm.dart';
import '../theme/app_theme.dart';

class TerminalScreen extends StatefulWidget {
  const TerminalScreen({super.key});

  @override
  State<TerminalScreen> createState() => _TerminalScreenState();
}

class _TerminalScreenState extends State<TerminalScreen> {
  final terminal = Terminal(maxLines: 10000);
  SSHClient? client;
  SSHSession? session;
  bool isConnected = false;
  String statusText = 'Baƒülantƒ± bekleniyor...';

  @override
  void initState() {
    super.initState();
    terminal.write('SSH Terminal - Baƒülanmak i√ßin link ikonuna tƒ±klayƒ±n.\r\n');
  }

  @override
  void dispose() {
    session?.close();
    client?.close();
    super.dispose();
  }

  Future<void> _showConnectionDialog() async {
    final hostController = TextEditingController(text: '100.64.0.1');
    final portController = TextEditingController(text: '22');
    final userController = TextEditingController(text: 'ubuntu');
    final passController = TextEditingController();

    final result = await showDialog<Map<String, String>>(
      context: context,
      builder: (ctx) => AlertDialog(
        backgroundColor: AppColors.bgCard,
        title: Text('SSH Baƒülantƒ±sƒ±', style: TextStyle(color: AppColors.textPrimary)),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: hostController,
                style: TextStyle(color: AppColors.textPrimary),
                decoration: InputDecoration(labelText: 'Host', labelStyle: TextStyle(color: AppColors.textSecondary)),
              ),
              TextField(
                controller: portController,
                style: TextStyle(color: AppColors.textPrimary),
                decoration: InputDecoration(labelText: 'Port', labelStyle: TextStyle(color: AppColors.textSecondary)),
                keyboardType: TextInputType.number,
              ),
              TextField(
                controller: userController,
                style: TextStyle(color: AppColors.textPrimary),
                decoration: InputDecoration(labelText: 'Username', labelStyle: TextStyle(color: AppColors.textSecondary)),
              ),
              TextField(
                controller: passController,
                style: TextStyle(color: AppColors.textPrimary),
                decoration: InputDecoration(labelText: 'Password', labelStyle: TextStyle(color: AppColors.textSecondary)),
                obscureText: true,
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(ctx),
            child: Text('ƒ∞ptal', style: TextStyle(color: AppColors.textSecondary)),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(ctx, {
              'host': hostController.text,
              'port': portController.text,
              'username': userController.text,
              'password': passController.text,
            }),
            child: Text('Baƒülan'),
          ),
        ],
      ),
    );

    if (result != null) {
      await _connectSSH(
        result['host']!,
        int.parse(result['port']!),
        result['username']!,
        result['password']!,
      );
    }
  }

  Future<void> _connectSSH(String host, int port, String username, String password) async {
    try {
      setState(() {
        statusText = 'Baƒülanƒ±yor...';
      });

      terminal.write('\r\nüîå Baƒülanƒ±yor: $username@$host:$port\r\n');

      final socket = await SSHSocket.connect(host, port, timeout: Duration(seconds: 10));
      client = SSHClient(socket, username: username, onPasswordRequest: () => password);
      
      await client!.authenticated;
      terminal.write('‚úì Kimlik doƒürulandƒ±\r\n');

      session = await client!.shell();
      
      session!.stdout.listen((data) {
        terminal.write(String.fromCharCodes(data));
      });

      session!.stderr.listen((data) {
        terminal.write('\x1b[31m${String.fromCharCodes(data)}\x1b[0m');
      });

      terminal.onOutput = (data) {
        session?.stdin.add(Uint8List.fromList(data.codeUnits));
      };

      setState(() {
        isConnected = true;
        statusText = 'Baƒülƒ±: $username@$host';
      });

      terminal.write('‚úì Shell a√ßƒ±ldƒ±\r\n\n');
    } catch (e) {
      terminal.write('\r\n‚ùå Hata: $e\r\n');
      setState(() {
        statusText = 'Baƒülantƒ± hatasƒ±';
      });
    }
  }

  void _disconnect() {
    session?.close();
    client?.close();
    setState(() {
      isConnected = false;
      statusText = 'Baƒülantƒ± kesildi';
    });
    terminal.write('\r\nüîå Baƒülantƒ± kesildi\r\n');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('üñ•Ô∏è SSH Terminal'),
        backgroundColor: AppColors.bgCard,
        actions: [
          if (!isConnected)
            IconButton(
              icon: Icon(Icons.link, color: AppColors.primary),
              onPressed: _showConnectionDialog,
              tooltip: 'Baƒülan',
            ),
          if (isConnected)
            IconButton(
              icon: Icon(Icons.link_off, color: AppColors.danger),
              onPressed: _disconnect,
              tooltip: 'Baƒülantƒ±yƒ± Kes',
            ),
        ],
      ),
      body: Column(
        children: [
          Container(
            width: double.infinity,
            padding: EdgeInsets.symmetric(vertical: 8, horizontal: 16),
            color: isConnected ? AppColors.success.withOpacity(0.2) : AppColors.bgCard,
            child: Row(
              children: [
                Icon(
                  isConnected ? Icons.check_circle : Icons.cancel,
                  color: isConnected ? AppColors.success : AppColors.textSecondary,
                  size: 16,
                ),
                SizedBox(width: 8),
                Text(
                  statusText,
                  style: TextStyle(
                    color: isConnected ? AppColors.success : AppColors.textSecondary,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: Container(
              color: Color(0xFF1E1E1E),
              child: TerminalView(
                terminal,
                theme: TerminalTheme(
                  foreground: Color(0xFFCCCCCC),
                  background: Color(0xFF1E1E1E),
                  cursor: Color(0xFF00FF00),
                  selection: Color(0xFF264F78),
                  black: Color(0xFF000000),
                  red: Color(0xFFCD3131),
                  green: Color(0xFF0DBC79),
                  yellow: Color(0xFFE5E510),
                  blue: Color(0xFF2472C8),
                  magenta: Color(0xFFBC3FBC),
                  cyan: Color(0xFF11A8CD),
                  white: Color(0xFFE5E5E5),
                  brightBlack: Color(0xFF666666),
                  brightRed: Color(0xFFF14C4C),
                  brightGreen: Color(0xFF23D18B),
                  brightYellow: Color(0xFFF5F543),
                  brightBlue: Color(0xFF3B8EEA),
                  brightMagenta: Color(0xFFD670D6),
                  brightCyan: Color(0xFF29B8DB),
                  brightWhite: Color(0xFFFFFFFF),
                  searchHitBackground: Color(0xFFFFFF2B),
                  searchHitBackgroundCurrent: Color(0xFF31FF26),
                  searchHitForeground: Color(0xFF000000),
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
